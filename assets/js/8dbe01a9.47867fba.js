"use strict";(self.webpackChunkseamless_cicd_github_io=self.webpackChunkseamless_cicd_github_io||[]).push([[120],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>h});var a=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function s(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?s(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):s(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function r(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)i=s[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)i=s[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var i=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=c(i),m=n,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||s;return i?a.createElement(h,o(o({ref:t},p),{},{components:i})):a.createElement(h,o({ref:t},p))}));function h(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=i.length,o=new Array(s);o[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[d]="string"==typeof e?e:n,o[1]=r;for(var c=2;c<s;c++)o[c]=i[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,i)}m.displayName="MDXCreateElement"},5906:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=i(7462),n=(i(7294),i(3905));const s={title:"Case Study"},o="Case Study",r={unversionedId:"case-study",id:"case-study",title:"Case Study",description:"1. Introduction",source:"@site/docs/case-study.md",sourceDirName:".",slug:"/case-study",permalink:"/case-study",draft:!1,tags:[],version:"current",frontMatter:{title:"Case Study"}},l={},c=[{value:"1. Introduction",id:"1-introduction",level:2},{value:"2. Evolution of Deployment Processes",id:"2-evolution-of-deployment-processes",level:2},{value:"Version Control Systems",id:"version-control-systems",level:3},{value:"Traditional Manual Deployment Processes",id:"traditional-manual-deployment-processes",level:3},{value:"Speed",id:"speed",level:4},{value:"Reliability",id:"reliability",level:4},{value:"Automated Deployment Processes",id:"automated-deployment-processes",level:3},{value:"Speed",id:"speed-1",level:4},{value:"Reliability",id:"reliability-1",level:4},{value:"3. CI/CD Pipelines",id:"3-cicd-pipelines",level:2},{value:"Stages of a CI/CD Pipeline",id:"stages-of-a-cicd-pipeline",level:3},{value:"4. Balancing Safety and Velocity",id:"4-balancing-safety-and-velocity",level:2},{value:"5. CI/CD for Monoliths and Microservices",id:"5-cicd-for-monoliths-and-microservices",level:2},{value:"Different Deployment Methods",id:"different-deployment-methods",level:3},{value:"Different Communication Methods",id:"different-communication-methods",level:3},{value:"6. CI/CD Challenges with Microservices",id:"6-cicd-challenges-with-microservices",level:2},{value:"Pipeline Management Difficulties",id:"pipeline-management-difficulties",level:3},{value:"The Many-Pipeline Problem",id:"the-many-pipeline-problem",level:4},{value:"The Shared Step Solution",id:"the-shared-step-solution",level:4},{value:"The Single, Parameterized Pipeline Solution",id:"the-single-parameterized-pipeline-solution",level:4},{value:"Microservice Testing Challenges",id:"microservice-testing-challenges",level:3},{value:"Solutions for Testing Microservices",id:"solutions-for-testing-microservices",level:4},{value:"7. Manually Building a CI/CD Pipeline for Microservices",id:"7-manually-building-a-cicd-pipeline-for-microservices",level:2},{value:"8. Existing Solutions",id:"8-existing-solutions",level:2},{value:"DIY Solutions",id:"diy-solutions",level:3},{value:"Commercial Solutions",id:"commercial-solutions",level:3},{value:"A Solution for Our Use Case",id:"a-solution-for-our-use-case",level:3},{value:"9. Introducing Seamless",id:"9-introducing-seamless",level:2},{value:"Installing Seamless",id:"installing-seamless",level:3},{value:"Using Seamless",id:"using-seamless",level:3},{value:"Connecting Services to the Pipeline",id:"connecting-services-to-the-pipeline",level:4},{value:"Running the Pipeline",id:"running-the-pipeline",level:4},{value:"Monitoring the Pipeline",id:"monitoring-the-pipeline",level:4},{value:"10. Architecture Overview",id:"10-architecture-overview",level:2},{value:"Fundamental Challenges",id:"fundamental-challenges",level:3},{value:"Core Architecture",id:"core-architecture",level:3},{value:"11. Building the Core Pipeline Functionality",id:"11-building-the-core-pipeline-functionality",level:2},{value:"Modeling and Storing Data",id:"modeling-and-storing-data",level:3},{value:"Automating Pipeline Runs",id:"automating-pipeline-runs",level:3},{value:"Managing Pipeline Execution",id:"managing-pipeline-execution",level:3},{value:"Running Tasks",id:"running-tasks",level:3},{value:"Virtual Machines or Containers",id:"virtual-machines-or-containers",level:4},{value:"Managing Servers",id:"managing-servers",level:4},{value:"Overview of Core Functionality",id:"overview-of-core-functionality",level:3},{value:"12. Improving Core Functionality",id:"12-improving-core-functionality",level:2},{value:"Realtime Dashboard Updates",id:"realtime-dashboard-updates",level:3},{value:"Improvements to Pre-Deployment Tasks",id:"improvements-to-pre-deployment-tasks",level:3},{value:"Sharing Data Among Containers",id:"sharing-data-among-containers",level:4},{value:"Integration Testing",id:"integration-testing",level:4},{value:"Improvements to Deployment-Related Tasks",id:"improvements-to-deployment-related-tasks",level:3},{value:"Manual Approval of Staging Environments",id:"manual-approval-of-staging-environments",level:4},{value:"Rollbacks",id:"rollbacks",level:4},{value:"Automatic Deployment of Fargate Clusters",id:"automatic-deployment-of-fargate-clusters",level:4},{value:"13. Beyond the Core Pipeline",id:"13-beyond-the-core-pipeline",level:2},{value:"Designing for Performance and Scale",id:"designing-for-performance-and-scale",level:3},{value:"Parallel Execution of State Machines",id:"parallel-execution-of-state-machines",level:4},{value:"Serverless Backend",id:"serverless-backend",level:4},{value:"Basic Security",id:"basic-security",level:3},{value:"OAuth",id:"oauth",level:4},{value:"Private Subnets",id:"private-subnets",level:4},{value:"Logging",id:"logging",level:3},{value:"Notifications",id:"notifications",level:3},{value:"14. Conclusion &amp; Future Work",id:"14-conclusion--future-work",level:2},{value:"Future Work",id:"future-work",level:3},{value:"References",id:"references",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...s}=e;return(0,n.kt)(d,(0,a.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"case-study"},"Case Study"),(0,n.kt)("h2",{id:"1-introduction"},"1. Introduction"),(0,n.kt)("p",null,"Seamless is an open-source, low-configuration CI/CD (Continuous Integration and Continuous Delivery/Deployment) framework that streamlines the development and deployment of containerized microservice applications. It automates the building, testing, and deployment of code, enabling developers to deliver software quickly and reliably. Seamless links multiple microservices to a single shared pipeline, eliminating the need to maintain a separate pipeline per service. Throughout this case study, we\u2019ll explore how the deployment process has evolved over time, the role of CI/CD, and how we designed Seamless to support our desired use case."),(0,n.kt)("h2",{id:"2-evolution-of-deployment-processes"},"2. Evolution of Deployment Processes"),(0,n.kt)("p",null,"A ",(0,n.kt)("strong",{parentName:"p"},"deployment process")," refers to the steps required to make an application accessible to end users. Companies typically care about their deployment process because it impacts:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The speed at which software can be delivered to end users."),(0,n.kt)("li",{parentName:"ol"},"The confidence the company can have that high-quality, functional code is released.")),(0,n.kt)("p",null,"The deployment process is initiated with a change in the source code and advances through building, testing, and deploying the code. Most modern companies manage source code through a version control system or VCS."),(0,n.kt)("h3",{id:"version-control-systems"},"Version Control Systems"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Version control systems (VCS)")," such as Git enable developers to collaborate on a single, centralized repository.",(0,n.kt)("sup",{parentName:"p",id:"fnref-1"},(0,n.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," By creating branches, developers can work on changes independently. After a change is complete, it is typically merged into a central branch called main or master. This is where the deployment process begins."),(0,n.kt)("p",null,"While most deployment processes utilize a version control system, the path from version control to deployment can be either ",(0,n.kt)("strong",{parentName:"p"},"manual")," or ",(0,n.kt)("strong",{parentName:"p"},"automatic"),"."),(0,n.kt)("h3",{id:"traditional-manual-deployment-processes"},"Traditional Manual Deployment Processes"),(0,n.kt)("p",null,"A manual deployment process consists of human-executed steps, like updating configuration files, copying files to production environments, and restarting servers."),(0,n.kt)("p",null,"In the past, manual deployments were common because automation tools were either unavailable or unsophisticated. Despite advances in automation, many companies still have outdated, manual deployment processes because of the time and effort required to adopt automation."),(0,n.kt)("p",null,"Two key factors prompted a movement away from manual deployment processes: speed and reliability."),(0,n.kt)("h4",{id:"speed"},"Speed"),(0,n.kt)("p",null,"One of the central issues with manual deployments is that they are time-consuming."),(0,n.kt)("p",null,"Firstly, there is usually a delay between the request for deployment and the start of the deployment. New commits sit idle in version control until the team responsible for deployment kicks off the deployment process. In some cases, developers must notify of new changes well before deployment dates. For example, TrueCar\u2019s manual deployment strategy involved \u201cChange Management tickets\u201d, which each team had to file eight days before deployment.",(0,n.kt)("sup",{parentName:"p",id:"fnref-2"},(0,n.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Manual deployment delay",src:i(1814).Z,width:"900",height:"182"})),(0,n.kt)("p",null,"Once the deployment process commences, sometimes a long series of manual tasks are required to bring the code to production. This includes running scripts, checking code quality, and monitoring progress.",(0,n.kt)("sup",{parentName:"p",id:"fnref-3"},(0,n.kt)("a",{parentName:"sup",href:"#fn-3",className:"footnote-ref"},"3"))," If there are multiple teams responsible for different parts of the deployment process, they need to coordinate their efforts, causing additional delays."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Waterfall delays",src:i(9683).Z,width:"900",height:"394"})),(0,n.kt)("h4",{id:"reliability"},"Reliability"),(0,n.kt)("p",null,"The second major pitfall of manual deployments is that they are error-prone. Firstly, humans are bad at performing rote activities in a consistent, reliable manner, leading to errors when configuring servers, setting up environments, and performing tests."),(0,n.kt)("p",null,"In addition to inconsistent administration of deployment steps, manual deployments are often run from inconsistent environments. Traditionally, manual deployments do not utilize a centralized system to build, test, and deploy developers' code. Instead, developers build and test applications on their local machines, each potentially having operating systems and environments that are different from one another and, by extension, the production environment.",(0,n.kt)("sup",{parentName:"p",id:"fnref-4"},(0,n.kt)("a",{parentName:"sup",href:"#fn-4",className:"footnote-ref"},"4"))," As a result, the application may function correctly when a developer tests it locally, but not in production."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Without build server",src:i(1360).Z,width:"900",height:"469"})),(0,n.kt)("p",null,"Still, there are some useful aspects to traditional manual deployment processes. For example, requiring human intervention can be a useful safety check against deploying buggy or low-quality code."),(0,n.kt)("h3",{id:"automated-deployment-processes"},"Automated Deployment Processes"),(0,n.kt)("p",null,"Over time, many companies began to introduce automation into their deployment process. An automated deployment process is commonly called a deployment pipeline. A deployment pipeline runs in a repeatable, consistent manner, resulting in faster and more reliable deployments."),(0,n.kt)("h4",{id:"speed-1"},"Speed"),(0,n.kt)("p",null,"The automation starts with version control. In automated deployments, version control systems are more than code storage locations: they plug directly into deployment pipelines. When a commit is made to a repository, the version control system can automatically trigger the deployment pipeline. This eliminates delays between deployment requests and pipeline initiation."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Manual vs automated deployment",src:i(7260).Z,width:"900",height:"328"})),(0,n.kt)("p",null,"Deployment pipelines that fully automate all steps from source through production can drastically shorten the time between release cycles. For example, once TrueCar switched to a fully automated pipeline, they transitioned from a \u201cburdensome weekly release cycle to deploying code up to 100 times per week\u201d.",(0,n.kt)("sup",{parentName:"p",id:"fnref-5"},(0,n.kt)("a",{parentName:"sup",href:"#fn-5",className:"footnote-ref"},"5"))),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Fast release cycle",src:i(948).Z,width:"900",height:"358"})),(0,n.kt)("h4",{id:"reliability-1"},"Reliability"),(0,n.kt)("p",null,"Automated deployment processes also ensure greater reliability by eliminating the need for human intervention and integrating tests and quality checks directly into the pipeline. Unlike manual deployments, automated deployment tasks are executed consistently; there is no chance of \u201cforgetting\u201d to perform a task. For example, automating testing consistently ensures bugs are identified early on."),(0,n.kt)("p",null,"Moreover, deployment pipelines address the environmental inconsistency issues found in classic manual deployments. They typically use dedicated machines, like a ",(0,n.kt)("strong",{parentName:"p"},"build server"),', to automatically carry out pipeline jobs. This eliminates the "it works on my machine" syndrome that is all too common in traditional manual deployments. If the code doesn\u2019t work on the build server, it won\'t make it to production.'),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"With build server",src:i(3472).Z,width:"900",height:"325"})),(0,n.kt)("p",null,"While automated deployment pipelines offer many advantages, transitioning from manual to automated deployments can be difficult. Resistance to change and extensive planning are common hurdles for many companies,",(0,n.kt)("sup",{parentName:"p",id:"fnref-6"},(0,n.kt)("a",{parentName:"sup",href:"#fn-6",className:"footnote-ref"},"6"))," and setting up deployment pipelines can be complex and demanding, as we\u2019ll see later."),(0,n.kt)("p",null,"When introducing automation into their deployment processes, companies are typically striving to meet at least one of the following objectives: continuous integration, continuous delivery, and continuous deployment."),(0,n.kt)("h2",{id:"3-cicd-pipelines"},"3. CI/CD Pipelines"),(0,n.kt)("p",null,"As a whole, CI/CD refers to the process of ",(0,n.kt)("em",{parentName:"p"},"continuously")," integrating code changes into a central repository and moving them closer to production. CI/CD can be broken down into a few parts."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Continuous Integration (CI)")," is the practice of regularly merging code into the main branch of a central repository after the code is tested and built."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Continuous Delivery (CD)")," extends upon continuous integration by continuously taking the new build and preparing it for release.",(0,n.kt)("sup",{parentName:"li",id:"fnref-7"},(0,n.kt)("a",{parentName:"sup",href:"#fn-7",className:"footnote-ref"},"7"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Continuous Deployment")," is the hallmark of a well-established CI/CD system: builds are immediately released into production.",(0,n.kt)("sup",{parentName:"li",id:"fnref-8"},(0,n.kt)("a",{parentName:"sup",href:"#fn-8",className:"footnote-ref"},"8")))),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Ci cd cd",src:i(2670).Z,width:"900",height:"552"})),(0,n.kt)("h3",{id:"stages-of-a-cicd-pipeline"},"Stages of a CI/CD Pipeline"),(0,n.kt)("p",null,"A deployment pipeline is essential for delivering code changes from development to production. Although there is no one-size-fits-all pipeline, they are typically broken up into four stages:",(0,n.kt)("sup",{parentName:"p",id:"fnref-9"},(0,n.kt)("a",{parentName:"sup",href:"#fn-9",className:"footnote-ref"},"9"))),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The ",(0,n.kt)("strong",{parentName:"p"},"Source")," stage connects the pipeline to a repository hosting platform such as GitHub. Specified triggers such as opening a pull request or merging into main will initiate the pipeline.",(0,n.kt)("sup",{parentName:"p",id:"fnref-10"},(0,n.kt)("a",{parentName:"sup",href:"#fn-10",className:"footnote-ref"},"10")))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The ",(0,n.kt)("strong",{parentName:"p"},"Test")," stage executes tests against the updated application to ensure code quality and functionality. Standard forms of testing include static code analysis, unit testing, and integration testing. Static code analysis checks for stylistic issues and basic programmatic vulnerabilities; tools include ESLint and RuboCop. Unit testing verifies the functionality of code components individually; tools include Jest and RSpec. Integration testing confirms proper interactions between application components; tools include Cypress and Selenium.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The ",(0,n.kt)("strong",{parentName:"p"},"Build")," stage bundles the updated source code with its dependencies into a single deployable artifact; tools include Webpack and Docker.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The ",(0,n.kt)("strong",{parentName:"p"},"Deployment")," stage pushes the built artifact to one or more environments. Typically, this includes a Staging (Pre-Production) environment used by QA teams to review the application and give approval, as well as a Production environment that is accessible to end users and represents the final outcome of the deployment process. Examples of deployment destinations are Amazon Web Services (AWS) Fargate and Google Cloud Run."))),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Pipeline stages",src:i(3249).Z,width:"900",height:"313"})),(0,n.kt)("p",null,"Most deployment pipelines incorporate the stages outlined above. However, as companies adopt continuous integration, delivery, and deployment practices to different extents, they must consider a new tradeoff: how to balance safety with velocity."),(0,n.kt)("h2",{id:"4-balancing-safety-and-velocity"},"4. Balancing Safety and Velocity"),(0,n.kt)("p",null,"Practitioners of automated deployment usually need to make a tradeoff. A highly automated process gets code to production fast, but it may increase the likelihood of bugs entering production. On the flip side, a safer deployment process with more manual checks can reduce velocity. Teams can make a number of decisions to optimize the location of their deployment pipeline on a spectrum of balancing safety with velocity."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Branching Strategy"),": Traditional feature branching workflows such as Github Flow prioritize safety by reducing the risk of untested code being pushed to main. In contrast, trunk-based development prioritizes speed by encouraging direct commits to main.",(0,n.kt)("sup",{parentName:"li",id:"fnref-11"},(0,n.kt)("a",{parentName:"sup",href:"#fn-11",className:"footnote-ref"},"11"))," However, if a bug is introduced in a trunk-based development workflow, it may necessitate a rollback to restore the code to its previous state.")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Branching strategies",src:i(3498).Z,width:"900",height:"589"})),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Merging Strategy"),": Deployment workflows can either automate the merging of pull requests when it passes status checks or require a manual merging process by a team member. Although auto-merging can speed up the pipeline, it introduces the risk of merging code that has not undergone adequate testing and review.")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Auto merge",src:i(7509).Z,width:"900",height:"235"})),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Staging Environment"),": Teams continuously deploy code to production or first deploy to a staging environment. In the case of continuous deployment, code that passes status checks is deployed straight to production without manual approval. This allows teams to deliver updates to end users quickly but increases the likelihood that production-time adjustments may need to be performed, such as rolling back to a previous deployment.")),(0,n.kt)("p",null,"To summarize, companies can enhance the speed of their CI/CD pipeline by implementing a trunk-based development workflow, automating code merging, and continuously deploying code. Alternatively, they can improve deployment safety by following a feature-branch workflow, mandating human code reviews before merging, and deploying to a staging environment before deploying to production."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Safety velocity spectrum",src:i(7885).Z,width:"900",height:"351"})),(0,n.kt)("p",null,"While CI/CD pipelines can be adapted to meet different goals in terms of speed and safety, they can also be adapted to support different application architectures, such as monoliths and microservices."),(0,n.kt)("h2",{id:"5-cicd-for-monoliths-and-microservices"},"5. CI/CD for Monoliths and Microservices"),(0,n.kt)("p",null,"There is no universal CI/CD pipeline that suits every scenario. To understand why CI/CD pipelines vary for monoliths and microservices, we must examine a few fundamental differences between the two."),(0,n.kt)("p",null,"A monolith is a single unit containing tightly-coupled components. A microservices architecture consists of independent, loosely coupled services distributed across the network. The monolith has historically been the dominant approach to building applications, but this has shifted toward microservices out of a need for agility and scalability. To understand how CI/CD pipelines differ for monoliths and microservices, we will first explore the differences in the architectures themselves."),(0,n.kt)("h3",{id:"different-deployment-methods"},"Different Deployment Methods"),(0,n.kt)("p",null,"For monoliths, the entire codebase is packaged into a single executable file or directory that is deployed to production.",(0,n.kt)("sup",{parentName:"p",id:"fnref-12"},(0,n.kt)("a",{parentName:"sup",href:"#fn-12",className:"footnote-ref"},"12"))," In contrast, microservices are deployed as smaller, independent units.",(0,n.kt)("sup",{parentName:"p",id:"fnref-13"},(0,n.kt)("a",{parentName:"sup",href:"#fn-13",className:"footnote-ref"},"13"))," Due to their size, microservices can be packaged, tested, and deployed much more efficiently than a monolith, enabling small, frequent updates to be made. Furthermore, microservices are fully decoupled so each service can be deployed on its own schedule without impacting the others."),(0,n.kt)("p",null,"Consider three services: a Payment, Inventory, and Notification Service. Deployments of each service could take place on different days of the week:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Releasing microservices",src:i(4434).Z,width:"900",height:"367"})),(0,n.kt)("h3",{id:"different-communication-methods"},"Different Communication Methods"),(0,n.kt)("p",null,"All components of a monolith run within the same application. As a result, the application\u2019s modules ",(0,n.kt)("strong",{parentName:"p"},"communicate with function calls"),". In contrast, microservices ",(0,n.kt)("strong",{parentName:"p"},"communicate remotely with network calls")," (e.g. using HTTP). Unlike function calls, which are fast and reliable, network calls are susceptible to latency and unreliability. As we\u2019ll discuss in a bit, these varying communication styles influence testing techniques for a CI/CD pipeline."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Monolith microservices",src:i(8358).Z,width:"900",height:"283"})),(0,n.kt)("p",null,"The distinct traits of microservices have implications for their CI/CD pipelines. Two defining characteristics of microservice architectures are their independent deployments and network-based communication methods. These two characteristics introduce two corresponding challenges for microservice-based CI/CD pipelines: managing pipelines for many microservices and conducting inter-service testing across the network."),(0,n.kt)("h2",{id:"6-cicd-challenges-with-microservices"},"6. CI/CD Challenges with Microservices"),(0,n.kt)("p",null,"In this section, we\u2019ll explore the specific challenges faced by CI/CD pipelines for microservices."),(0,n.kt)("h3",{id:"pipeline-management-difficulties"},"Pipeline Management Difficulties"),(0,n.kt)("h4",{id:"the-many-pipeline-problem"},"The Many-Pipeline Problem"),(0,n.kt)("p",null,"One approach to fully decoupling microservice deployments is to attach an individual CI/CD pipeline to each service. Since microservice teams are usually autonomous, it is common for teams to build their own pipelines. This gives each team full control of the pipeline and its stages."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Many pipelines",src:i(2264).Z,width:"900",height:"472"})),(0,n.kt)("p",null,"However, this many-pipeline approach adds complexity. There are multiple pipelines to maintain, along with their associated YAML files, scripts, and library versions. For example, when Expedia experienced an \u201cexplosion in the number of CI/CD pipelines\u201d, the engineering teams found that they were \u201cconstantly needing to update\u201d the pipelines for each microservice.",(0,n.kt)("sup",{parentName:"p",id:"fnref-14"},(0,n.kt)("a",{parentName:"sup",href:"#fn-14",className:"footnote-ref"},"14"))),(0,n.kt)("p",null,"Furthermore, while microservices usually have decentralized teams, there still often exists a central team overseeing the pipelines.",(0,n.kt)("sup",{parentName:"p",id:"fnref-15"},(0,n.kt)("a",{parentName:"sup",href:"#fn-15",className:"footnote-ref"},"15"))," This central team may struggle to keep up with the specifics of building, testing, and deploying each microservice. Consequently, it can be challenging to quickly make system-wide adjustments, such as rolling back a buggy microservice that has caused issues in the production environment.",(0,n.kt)("sup",{parentName:"p",id:"fnref-16"},(0,n.kt)("a",{parentName:"sup",href:"#fn-16",className:"footnote-ref"},"16"))),(0,n.kt)("p",null,"To ease the burden of managing deployment pipelines for tens or hundreds of microservices, modularization techniques have emerged."),(0,n.kt)("h4",{id:"the-shared-step-solution"},"The Shared Step Solution"),(0,n.kt)("p",null,"One solution for modularizing CI/CD pipelines across microservices is to reuse steps for different microservice pipelines. These shared steps could come in the form of shell scripts, reusable Docker images, repositories or libraries, or YAML templates."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Shared segments",src:i(8042).Z,width:"900",height:"472"})),(0,n.kt)("p",null,"This approach can help eliminate redundancies across pipelines, keeping them \u201cDRY\u201d.",(0,n.kt)("sup",{parentName:"p",id:"fnref-17"},(0,n.kt)("a",{parentName:"sup",href:"#fn-17",className:"footnote-ref"},"17"))," Shared libraries prove particularly useful for microservices that have distinct deployment requirements but still share some common elements like utility functions and customized steps."),(0,n.kt)("p",null,"However, there are some major downsides to this approach. For one, it still requires bootstrapping and maintaining an individual pipeline for each microservice, and the shared pipeline steps themselves need to be maintained. Furthermore, this approach frequently results in version conflicts, where a shared step may contain a library that is compatible with certain microservices but not with others.",(0,n.kt)("sup",{parentName:"p",id:"fnref-18"},(0,n.kt)("a",{parentName:"sup",href:"#fn-18",className:"footnote-ref"},"18"))),(0,n.kt)("p",null,"Let\u2019s look at a different strategy that mitigates some of these complications."),(0,n.kt)("h4",{id:"the-single-parameterized-pipeline-solution"},"The Single, Parameterized Pipeline Solution"),(0,n.kt)("p",null,"The former approach assumes that each microservice must have its own dedicated CI/CD pipeline. An alternative approach is to create a single, reusable, parameterized pipeline that is passed context whenever it is executed. This means that the pipeline is flexible: instead of linking pipelines to fixed repository URLs, testing commands, and configuration file entry points, these values can be configurable for each service. Adding a new microservice to the pipeline is simply a matter of filling in these parameters.",(0,n.kt)("sup",{parentName:"p",id:"fnref-19"},(0,n.kt)("a",{parentName:"sup",href:"#fn-19",className:"footnote-ref"},"19"))),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Shared pipeline",src:i(2661).Z,width:"900",height:"398"})),(0,n.kt)("p",null,"While this single-pipeline approach can simplify building and maintaining CI/CD pipelines, it may not be the best fit for every team. To make it work, there must be a certain degree of uniformity in terms of how each service is built, tested, and deployed. For example, every microservice might need to be deployed to the same Kubernetes cluster. For microservices with more heterogeneous deployment requirements, a different approach may be needed."),(0,n.kt)("p",null,"Along with issues of managing CI/CD pipelines for microservices, there are also unique challenges with testing microservices."),(0,n.kt)("h3",{id:"microservice-testing-challenges"},"Microservice Testing Challenges"),(0,n.kt)("p",null,"Testing microservices and their interactions is essential for ensuring that the system functions correctly, but it can be challenging due to their distributed nature.",(0,n.kt)("sup",{parentName:"p",id:"fnref-20"},(0,n.kt)("a",{parentName:"sup",href:"#fn-20",className:"footnote-ref"},"20"))," Unlike monolithic applications that run as a single entity, microservices are split across a network, so any tests that involve multiple services require making network calls. Consequently, testing strategies that were applied to monolithic applications may need to be reconsidered for microservices. Despite this challenge, it is crucial to test microservices in isolation, together, and as a whole system to ensure their proper functioning."),(0,n.kt)("h4",{id:"solutions-for-testing-microservices"},"Solutions for Testing Microservices"),(0,n.kt)("p",null,"There are several techniques available for testing at different levels of granularity. Here are some of the essential ones:",(0,n.kt)("sup",{parentName:"p",id:"fnref-21"},(0,n.kt)("a",{parentName:"sup",href:"#fn-21",className:"footnote-ref"},"21"))),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Unit Testing")," involves testing atomic units of a single service, such as its functions or classes, without relying on other services. However, it does not verify the interactions between services. Any services required for a unit test are mocked.")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Unit mock testing",src:i(9411).Z,width:"900",height:"330"})),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Integration Testing")," involves making network calls to test multiple services functioning together as a single subsystem. This technique may not be as precise as unit testing, but it can validate the larger behavior of whole subsystems. Integration Testing does not typically test the system as a whole.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"On-Demand Staging Environments")," replicate production conditions and include all the microservices in the system. Although not a formal testing strategy, developers can use staging environments to test the system end-to-end, without getting bogged down in the details of each service and inter-service communications. However, staging environments can be resource-intensive."))),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Integration vs staging testing",src:i(7461).Z,width:"900",height:"405"})),(0,n.kt)("p",null,"In practice, a comprehensive testing strategy will usually incorporate a combination of these testing strategies in order to increase confidence and test coverage."),(0,n.kt)("p",null,"Development teams using a manual deployment process for microservices might be looking to reap the benefits of automated deployments. One option development teams may consider is to build their own CI/CD pipeline"),(0,n.kt)("h2",{id:"7-manually-building-a-cicd-pipeline-for-microservices"},"7. Manually Building a CI/CD Pipeline for Microservices"),(0,n.kt)("p",null,"Building a CI/CD pipeline from scratch can be time-consuming and difficult, especially if it needs to handle the inherent complexities of a microservices architecture. Smaller teams with limited experience with cloud infrastructure and automation may struggle to architect a robust pipeline. They might also lack the staff and expertise to maintain and optimize it. The following is an example list of tasks for setting up a pipeline on AWS (we definitely don\u2019t expect you to read everything, though you\u2019re welcome to)."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Building-a-pipeline",src:i(8370).Z,width:"900",height:"669"})),(0,n.kt)("p",null,"Instead of investing significant time and effort into this project, teams may choose to leverage existing CI/CD solutions to simplify the process."),(0,n.kt)("h2",{id:"8-existing-solutions"},"8. Existing Solutions"),(0,n.kt)("p",null,"Existing solutions typically fall into two categories: DIY solutions and commercial solutions."),(0,n.kt)("h3",{id:"diy-solutions"},"DIY Solutions"),(0,n.kt)("p",null,"For organizations with more complex CI/CD pipeline setups, DIY solutions might be the best fit. There are many free open-source DIY CI/CD tools such as Jenkins, Ansible, Gitlab, and Tekton. These tools offer a high level of customization and control, allowing the tool to be tailored to a specific use case. For example, Jenkins achieves this customizability through its extensive plugin library.",(0,n.kt)("sup",{parentName:"p",id:"fnref-22"},(0,n.kt)("a",{parentName:"sup",href:"#fn-22",className:"footnote-ref"},"22"))),(0,n.kt)("p",null,"Many DIY tools also allow for pipeline modularization and reusability. Jenkins accomplishes pipeline modularization through shared libraries while Tekton allows for the reusability of different subcomponents, such as tasks and pipelines.",(0,n.kt)("sup",{parentName:"p",id:"fnref-23"},(0,n.kt)("a",{parentName:"sup",href:"#fn-23",className:"footnote-ref"},"23"))),(0,n.kt)("p",null,"While DIY solutions like Jenkins and Tekton offer a high degree of customization, they do require users to have a certain level of expertise in the relevant technologies. This means that teams with less experience in CI/CD may find them challenging to use, as they require users to make decisions about plugins, integrations, and deployment options. For example, with Jenkins, users must have knowledge of relevant plugins and be comfortable maintaining their own infrastructure. Likewise, Tekton requires experience with Kubernetes to set up and use effectively."),(0,n.kt)("p",null,"While companies with CI/CD expertise might be equipped to build customized pipelines, less established teams might reach for a Software as a Service (SaaS) product to help manage their CI/CD needs."),(0,n.kt)("h3",{id:"commercial-solutions"},"Commercial Solutions"),(0,n.kt)("p",null,"There are various commercial CI/CD pipelines available such as Codefresh, Semaphore, CircleCI, and AWS CodePipeline. While not typically as flexible as open-source tools, these solutions do generally provide a degree of customization. For instance, YAML configuration files are commonly used to configure pipelines and their stages."),(0,n.kt)("p",null,"Some commercial CI/CD solutions offer pipeline modularization and reusability. With CodeFresh, a single pipeline can be linked to multiple repositories, or \u201ctriggers\u201d. Environment variables associated with each trigger can then be passed to the pipeline at execution time. Meanwhile, Semaphore offers a \u201cmonorepo\u201d approach, enabling multiple applications stored in a single repository to access the same CI/CD pipeline."),(0,n.kt)("p",null,"Some commercial CI/CD solutions provide microservice-specific testing solutions. For example, in order to test one service against other services, Codefresh allows the user to specify \u201csidecar containers\u201d that will spin up during specified stages of the pipeline."),(0,n.kt)("p",null,"Commercial solutions are not suitable for the CI/CD needs of all teams. They are typically not as extensible as open-source solutions, making them unsuitable for certain use cases. And despite being generally easier to use than DIY tools, they usually still require setting up and configuring pipelines."),(0,n.kt)("h3",{id:"a-solution-for-our-use-case"},"A Solution for Our Use Case"),(0,n.kt)("p",null,"We wanted to build a tool for a specific use case: companies with a lower employee count that have embraced a containerized, microservices approach, seeking an uncomplicated solution for managing their CI/CD pipelines across their microservices."),(0,n.kt)("p",null,"While microservice architectures are commonly associated with large enterprises such as Netflix, some startups and small teams utilize a microservice-first approach. Startups that value fast feedback cycles often turn to microservice architectures as they allow for the release of incremental updates to microservices in isolation.",(0,n.kt)("sup",{parentName:"p",id:"fnref-24"},(0,n.kt)("a",{parentName:"sup",href:"#fn-24",className:"footnote-ref"},"24"))," Furthermore, startups anticipating a need to scale might adopt microservices early on because small microservices are easier to scale independently than a giant monolith.",(0,n.kt)("sup",{parentName:"p",id:"fnref-25"},(0,n.kt)("a",{parentName:"sup",href:"#fn-25",className:"footnote-ref"},"25"))),(0,n.kt)("p",null,"An example of this is Sortal, a digital asset management product built by a startup using microservices. Despite being a small application, Sortal still had \u201ca lot of ","[deployment]"," processes to manage, especially for a small team.\u201d",(0,n.kt)("sup",{parentName:"p",id:"fnref-26"},(0,n.kt)("a",{parentName:"sup",href:"#fn-26",className:"footnote-ref"},"26"))," Sortal\u2019s small team overcame this complexity by utilizing a centralized, automated pipeline that enabled them to continuously deploy their application. We sought to assist companies with similar profiles in managing their microservices architecture."),(0,n.kt)("p",null,"Our solution would make managing the deployment of multiple microservices easier by applying a single, reusable, pipeline to each of the user's services. It would require minimal configuration by providing sensible default settings that meet the typical demands of a CI/CD pipeline. However, it would still accommodate different CI/CD workflows (varying branching, merging, and auto-deployment strategies)."),(0,n.kt)("p",null,"Furthermore, unlike most commercial products, our solution would be open-source and fully self-hosted, allowing for complete control of code and data ownership. Lastly, it would provide options for testing and inspecting microservices at different levels of granularity."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Comparison chart",src:i(2114).Z,width:"900",height:"425"})),(0,n.kt)("h2",{id:"9-introducing-seamless"},"9. Introducing Seamless"),(0,n.kt)("p",null,"Seamless is an open-source CI/CD pipeline tool designed specifically for containerized microservices deployed to AWS Elastic Container Service (ECS) Fargate. It offers a user-friendly interface that is similar to many of the popular interfaces found in commercial solutions. Unlike other CI/CD pipelines, Seamless does not require user-defined scripting through a YAML file template for configuration. Instead, Seamless relies on a core set of default stages: Prepare, Code Quality, Unit Test, Build, Integration Test, Deploy to Staging, and Deploy to Production. This approach makes Seamless easy to use right out of the box. Through the interface, users simply provide the necessary commands needed to run each stage. In the following sections, we will explore the steps a user takes to install, set up, and run Seamless\u2019s CI/CD pipeline on their microservices."),(0,n.kt)("h3",{id:"installing-seamless"},"Installing Seamless"),(0,n.kt)("p",null,"In order to install and deploy Seamless a user must have:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"An AWS account"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"npm")," installed"),(0,n.kt)("li",{parentName:"ul"},"The AWS CLI installed and configured"),(0,n.kt)("li",{parentName:"ul"},"The AWS CDK command line tool installed")),(0,n.kt)("p",null,"To install the Seamless CLI, the user runs ",(0,n.kt)("inlineCode",{parentName:"p"},"npm install -g @seamless-cicd/seamless"),". Global installation is required. Next, running ",(0,n.kt)("inlineCode",{parentName:"p"},"seamless init")," will guide this person through a series of inputs needed to deploy Seamless. After completing the initialization process, executing ",(0,n.kt)("inlineCode",{parentName:"p"},"seamless deploy")," will provision Seamless's infrastructure on AWS and provide a URL to access the platform's dashboard."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Cli commands",src:i(8538).Z,width:"900",height:"442"})),(0,n.kt)("h3",{id:"using-seamless"},"Using Seamless"),(0,n.kt)("p",null,"After deploying Seamless\u2019s infrastructure, the user can visit the dashboard and complete the pipeline setup process. They will provide the names of their production and staging environments (ECS clusters) so that Seamless knows where to deploy their microservices."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Pipeline gif",src:i(4094).Z,width:"3400",height:"1284"})),(0,n.kt)("h4",{id:"connecting-services-to-the-pipeline"},"Connecting Services to the Pipeline"),(0,n.kt)("p",null,"Upon completing the setup of the pipeline, the user can create multiple services that will utilize the pipeline. The service setup process collects all the necessary information to run the pipeline, verify code functionality, and promote it to production."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Service gif",src:i(2237).Z,width:"3400",height:"1284"})),(0,n.kt)("h4",{id:"running-the-pipeline"},"Running the Pipeline"),(0,n.kt)("p",null,"Now the pipeline is ready to be activated. It can be triggered manually or by the version control changes:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"A pull request is opened (PR Open)"),(0,n.kt)("li",{parentName:"ol"},"A commit is made on a pull request (PR Sync)"),(0,n.kt)("li",{parentName:"ol"},"A pull request is merged (Commit to Main)")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Pipeline triggers",src:i(1421).Z,width:"900",height:"492"})),(0,n.kt)("p",null,"Now that the pipeline is running, the user might want to view its progress."),(0,n.kt)("h4",{id:"monitoring-the-pipeline"},"Monitoring the Pipeline"),(0,n.kt)("p",null,"Seamless\u2019s UI displays live updates of both runs and stages, enabling users to stay informed of pipeline outcomes as runs and stages transition from \u201cIdle\u201d to \u201cIn Progress\u201d, and ultimately to \u201cSuccess\u201d or \u201cFailure\u201d. Log data is updated live, making it easier to identify and troubleshoot errors when they occur."),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},(0,n.kt)("strong",{parentName:"em"},"(GIF of live status updates here)"))),(0,n.kt)("p",null,"We will now shift the discussion toward the technical challenges we faced when building Seamless."),(0,n.kt)("h2",{id:"10-architecture-overview"},"10. Architecture Overview"),(0,n.kt)("p",null,"We\u2019ll start with the fundamental challenges we had to address, provide a high-level overview of our core architecture, and then dive deeper into design decisions and tradeoffs."),(0,n.kt)("h3",{id:"fundamental-challenges"},"Fundamental Challenges"),(0,n.kt)("p",null,"When building our initial prototype, we focused on the fundamental problems that needed to be solved in order to build the core functionality of a CI/CD pipeline:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Deciding how to model pipeline data, and selecting a database that we could run detailed queries on"),(0,n.kt)("li",{parentName:"ul"},"Configuring code repositories to notify Seamless whenever code changes, and setting up a way to use those notifications as triggers to automatically start the pipeline"),(0,n.kt)("li",{parentName:"ul"},"Finding a mechanism to monitor and control the pipeline\u2019s execution flow, with the ability to store complex state"),(0,n.kt)("li",{parentName:"ul"},"Determining how and where to execute the physical steps of each pipeline stage")),(0,n.kt)("h3",{id:"core-architecture"},"Core Architecture"),(0,n.kt)("p",null,"After some initial prototyping, we arrived at the architecture below, which shows the high-level flow of how a pipeline is triggered and executed. A backend server listens for webhooks from a code repository, retrieves pipeline information from a database, and starts the pipeline. The pipeline performs a series of tasks, including deploying the updated application to production."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Architecture core simplified",src:i(7924).Z,width:"900",height:"495"})),(0,n.kt)("p",null,"With an overall direction in mind, we decided to explore different options for each component of our core architecture."),(0,n.kt)("h2",{id:"11-building-the-core-pipeline-functionality"},"11. Building the Core Pipeline Functionality"),(0,n.kt)("h3",{id:"modeling-and-storing-data"},"Modeling and Storing Data"),(0,n.kt)("p",null,"At the outset, we created a data model that served as the bedrock for the remainder of our application. It comprises four fundamental entities: Pipelines, Services, Runs, and Stages. As a reminder, smaller companies without dedicated teams for managing multiple disparate CI/CD pipelines can simplify their CI/CD management by using a single pipeline for multiple services. Subsequently, our data model establishes a one-to-many relationship between Pipelines and Services. Additionally, each Service can have many Runs and each Run can have many Stages."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Data model",src:i(2602).Z,width:"900",height:"241"})),(0,n.kt)("p",null,"At first, we considered using a NoSQL document store like DynamoDB to store our data. NoSQL document stores are optimized for speed, scalability, and storing unstructured data. However, given that our project does not involve high-frequency read or write operations, and our schema is fixed, we opted for PostgreSQL, a relational database. We rely on the Prisma ORM to streamline schema creation and migration, as well as data manipulation."),(0,n.kt)("p",null,"With our data model in place, we narrowed in on how we could automate the journey of code from source to production."),(0,n.kt)("h3",{id:"automating-pipeline-runs"},"Automating Pipeline Runs"),(0,n.kt)("p",null,"A key component of automated deployment pipelines is their ability to execute immediately when source code is modified. Webhooks are used to link user repositories to the pipeline:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Webhook",src:i(4022).Z,width:"900",height:"347"})),(0,n.kt)("p",null,"Seamless registers the webhooks using Github\u2019s Octokit client. The flow from Webhook registration to pipeline initiation is as follows:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Seamless creates a webhook in the user's repository, utilizing GitHub's Octokit client to authenticate and interact with their API."),(0,n.kt)("li",{parentName:"ol"},"The user makes an update to the source code."),(0,n.kt)("li",{parentName:"ol"},"GitHub sends a webhook to Seamless\u2019s backend server."),(0,n.kt)("li",{parentName:"ol"},"The backend uses the payload of the webhook to identify the trigger and initiate the appropriate pipeline process.")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Create webhook",src:i(8979).Z,width:"900",height:"373"})),(0,n.kt)("p",null,"However, running the entire deployment pipeline for every change would have compromised our goal of velocity. To overcome this challenge, we tailored our pipeline to three distinct triggers:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Merge/Push to Main"),(0,n.kt)("li",{parentName:"ol"},"Open Pull Request"),(0,n.kt)("li",{parentName:"ol"},"Synchronize/Update Pull Request")),(0,n.kt)("p",null,"For pushes to the main branch, the entire pipeline is executed, whereas pull request opens and synchronizations only perform code quality checks and tests, without any intention of deployment:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Trigger partial vs full run",src:i(4066).Z,width:"900",height:"289"})),(0,n.kt)("p",null,"With a system in place to trigger the pipeline, we moved on to building out the pipeline itself."),(0,n.kt)("h3",{id:"managing-pipeline-execution"},"Managing Pipeline Execution"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Architecture core simplified taskmanager",src:i(5716).Z,width:"900",height:"495"})),(0,n.kt)("p",null,"First, we needed to consider how to manage the execution flow of our pipeline. We aimed to avoid having a single fixed execution path for our pipeline, as the degree to which different companies' CI/CD workflows embrace automation can vary significantly. The execution path could differ depending on:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"What triggered it"),(0,n.kt)("li",{parentName:"ol"},"User-configured settings, such as whether a staging environment is used"),(0,n.kt)("li",{parentName:"ol"},"The success of tasks")),(0,n.kt)("p",null,"We wanted to build a system that would behave differently depending on these factors. We also wanted our system to keep track of the state of the pipeline as it ran so we could inform users of it."),(0,n.kt)("p",null,"Our initial approach to managing tasks was to use a job queue to run tasks in a linear manner. This did not suffice for our final use case. The job queue lacked built-in capabilities to model nonlinear execution paths taken by our pipeline. Furthermore, it did not provide a centralized way to track the status of the pipeline and its stages, nor could it guarantee that only one stage was executing at a time."),(0,n.kt)("p",null,"We also looked into event-driven architecture where each task would call the next, and there would be no manager. However, we felt that having a central place to manage state would make managing and debugging our pipeline easier."),(0,n.kt)("p",null,"Ultimately, we decided to use a state machine to orchestrate pipeline executions. The state machine model allowed us to describe the behavior of our pipeline by defining all possible states for each stage (such as Idle, Success, Fail, or In Progress), the transitions between these states, and the decisions along the way that could affect its execution flow."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"State machine example",src:i(8973).Z,width:"900",height:"338"})),(0,n.kt)("p",null,"One drawback to state machines was that defining states and transitions in advance would limit the ability to add new steps dynamically. As a result, the core logic of the pipeline would be unmodifiable once it is set up. We determined that this tradeoff was acceptable for our use case. Smaller organizations early in their adoption of microservices are more likely to have services with similar CI/CD requirements, resulting in a reduced need for customizability."),(0,n.kt)("p",null,"Next, we needed to determine how we would run our state machine. We knew the state machine would have varying usage patterns, depending on the team's commit rate and other factors. To accommodate this flexibility, we opted for a serverless, pay-as-you-go infrastructure that could scale according to our users' needs."),(0,n.kt)("p",null,"AWS offers a serverless state machine service called Step Functions that integrates natively with other AWS services. As the Step Function progresses through the stages in our pipeline, it uses a context object to communicate pipeline status to our backend effectively."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Step function definition",src:i(4517).Z,width:"900",height:"622"})),(0,n.kt)("p",null,"We also considered running the state machine directly on our backend servers, utilizing the XState JavaScript library to define the logic, but its lack of AWS integrations made it less suitable for our needs. Additionally, this approach may have introduced scaling challenges that were abstracted by using step functions."),(0,n.kt)("p",null,"At this point, we had a tool that would help us manage pipeline tasks, but we also needed to consider how to run the tasks themselves."),(0,n.kt)("h3",{id:"running-tasks"},"Running Tasks"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Architecture core simplified taskexecutors",src:i(3142).Z,width:"900",height:"495"})),(0,n.kt)("p",null,"A pipeline task comprises the set of operations that must be performed to fulfill the purpose of a given stage. In Seamless, a task is a Javascript program. Some of these programs run child processes that execute commands for cloning, building, and testing code, while others use the AWS SDK to perform deployment-related actions."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Build task",src:i(612).Z,width:"900",height:"461"})),(0,n.kt)("p",null,"Now that we know what a task is, let\u2019s look at the two infrastructure choices we had for running these tasks: virtual machines and containers."),(0,n.kt)("h4",{id:"virtual-machines-or-containers"},"Virtual Machines or Containers"),(0,n.kt)("p",null,"To determine the appropriate infrastructure for running pipeline tasks, we examined the nature of the tasks themselves."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Tasks are ",(0,n.kt)("strong",{parentName:"li"},"consistent"),": For every pipeline run, each task should operate in the same way."),(0,n.kt)("li",{parentName:"ol"},"Tasks are ",(0,n.kt)("strong",{parentName:"li"},"ephemeral"),": Once a task runs, it will not rerun until the next pipeline execution."),(0,n.kt)("li",{parentName:"ol"},"Tasks ",(0,n.kt)("strong",{parentName:"li"},"fluctuate with demand"),": Depending on the team's commit rate and other factors, the frequency at which a task runs can vary over time.")),(0,n.kt)("p",null,"One approach we explored was having a dedicated build server running on a virtual machine (VM) to build, test, and deploy a user\u2019s application. This fulfilled our need for a centralized, consistent environment to run tasks. Additionally, VMs also offer full hardware virtualization, providing strong isolation from other virtual machines running on the same host. However, the virtual machine approach had a few drawbacks:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Elasticity"),": Scaling VMs to meet the demands of the pipeline is slow because they take a few minutes to start."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Resource-Intensive"),": VMs require significant resources since each virtualizes an entire operating system. Furthermore, the VM running the pipeline would need to be configured with all dependencies to run any pipeline tasks.")),(0,n.kt)("p",null,"To overcome the limitations of virtual machines, we explored alternative solutions and discovered that using containers to run steps in CI/CD pipelines is a prevalent industry trend.",(0,n.kt)("sup",{parentName:"p",id:"fnref-27"},(0,n.kt)("a",{parentName:"sup",href:"#fn-27",className:"footnote-ref"},"27"))," Like a build server on a virtual machine, containers provide consistent environments for running tasks. However, unlike virtual machines, containers are more lightweight, meaning that they can more easily spin up and down automatically to match demand."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Container vs vm",src:i(1069).Z,width:"900",height:"379"})),(0,n.kt)("p",null,"As our infrastructure was already hosted on AWS, we aimed to find an AWS-native way to run containers, and so decided to use Amazon\u2019s Elastic Container Service (ECS)."),(0,n.kt)("h4",{id:"managing-servers"},"Managing Servers"),(0,n.kt)("p",null,"Our next decision was whether to run containers in a serverless fashion with ECS Fargate or to have direct access to the virtual machines hosting the containers. While Fargate would reduce underlying server management overhead, it was not a feasible choice. We actually needed access to the underlying virtual machines in order to run Docker within our containers for tasks such as building services as images. Without access to the virtual machines, we couldn't achieve this functionality. Consequently, we determined that running ECS on EC2, AWS\u2019s virtual machine service, was the optimal solution for our specific requirements."),(0,n.kt)("p",null,"Since Step Functions natively integrates with other AWS services, we could trigger the ECS task containers (or, as we call them, Task Executors) directly from it, as the below diagram depicts:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Task containers",src:i(3675).Z,width:"900",height:"371"})),(0,n.kt)("h3",{id:"overview-of-core-functionality"},"Overview of Core Functionality"),(0,n.kt)("p",null,"Ultimately we settled on the following implementation for our core architecture:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"A change in the user\u2019s Github repository sends a webhook to Seamless\u2019s backend."),(0,n.kt)("li",{parentName:"ol"},"Seamless\u2019s backend processes the webhook and fetches relevant information from Postgres to start the state machine."),(0,n.kt)("li",{parentName:"ol"},"A state machine running on Step Functions orchestrates the pipeline execution flow."),(0,n.kt)("li",{parentName:"ol"},"The state machine calls ECS task executors to run pipeline tasks.")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Architecture core detailed",src:i(5469).Z,width:"900",height:"495"})),(0,n.kt)("p",null,"Once we had built the structural foundation for the pipeline, we looked to expand our project further."),(0,n.kt)("h2",{id:"12-improving-core-functionality"},"12. Improving Core Functionality"),(0,n.kt)("p",null,"Once Seamless\u2019 core functionality was working, users were able to automatically test, build, and deploy their microservices upon changes in version control. With our core pipeline in place, we decided to add features to make our CI/CD pipeline more robust and targeted toward microservices. Below is a more detailed diagram of our architecture, with improved functionality in place:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Architecture improved simplified predeployment",src:i(3800).Z,width:"900",height:"512"})),(0,n.kt)("h3",{id:"realtime-dashboard-updates"},"Realtime Dashboard Updates"),(0,n.kt)("p",null,"In order to give the user the ability to detect and respond to pipeline issues as they occur, we implemented real-time updates that are sent to our dashboard."),(0,n.kt)("p",null,"We considered using client-side polling, where the client queries the API at regular intervals but ultimately decided against it because it generates unnecessary HTTP requests and might cause delays between backend and frontend updates. We decided to use WebSockets instead. The dashboard initiates a WebSockets connection to a Websockets API Gateway on the backend. Status updates and logs arriving on the backend are forwarded to the dashboard via the WebSockets connection persisted by the API Gateway."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Polling vs websockets",src:i(9253).Z,width:"900",height:"510"})),(0,n.kt)("h3",{id:"improvements-to-pre-deployment-tasks"},"Improvements to Pre-Deployment Tasks"),(0,n.kt)("h4",{id:"sharing-data-among-containers"},"Sharing Data Among Containers"),(0,n.kt)("p",null,"To minimize repeated work, we needed to ensure that multiple pipeline tasks could access the same files. For example, the Prepare Stage clones the source code so the Build Stage can package it into a Docker image later. To achieve this, we used the AWS EFS network file system, which is designed to be mounted to any number of EC2 instances or ECS containers. EFS scales automatically by providing the necessary storage without needing to specify the capacity in advance."),(0,n.kt)("p",null,"When each container is started, it is automatically mounted to a shared persistent Docker volume on EFS. The hash of the commit that triggered the current execution serves as the directory name for the source code, which prevents naming conflicts and enables pipeline executions from separate commits or services to occur in parallel. If two commits cause two concurrent pipeline executions, the files generated by either execution will not interfere with one another."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Efs",src:i(3415).Z,width:"900",height:"524"})),(0,n.kt)("p",null,"We also considered block storage. Although block storage presented some performance advantages, it was designed to be accessed from a singular virtual machine, making it unsatisfactory for our distributed task containers that were running across multiple VMs."),(0,n.kt)("h4",{id:"integration-testing"},"Integration Testing"),(0,n.kt)("p",null,"Earlier, we presented integration testing as a key testing strategy for microservice architectures, where multiple microservices are tested together as a whole subsystem. To show an example, let\u2019s examine two methods for performing integration tests for a new version of Service A against the latest versions of Service B and C."),(0,n.kt)("p",null,"One option is to test the new Service A against live, production instances of Service B and C, but this approach has a major drawback: any destructive calls made during testing could unintentionally alter the production system's state or affect its performance."),(0,n.kt)("p",null,"Another approach is to spin up instances of Service B and C in an isolated test environment. Despite added complexity and additional resource requirements, this approach avoids the risks of interfering with production instances of services."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Test vs prod environment",src:i(299).Z,width:"900",height:"360"})),(0,n.kt)("p",null,"To accomplish this, we leveraged Docker Compose, a service that facilitates container management and networking. The user provides a Docker Compose configuration file that specifies the dependency services required to run integration tests for Service A. During the integration testing phase, Docker Compose pulls the latest versions of the dependency services from a container registry and runs the integration tests."),(0,n.kt)("p",null,"This approach offers several benefits, including the ability to test in an environment that closely mirrors production and avoiding the risk of inadvertently affecting live data. Moreover, it aligns with the user's existing workflow if they already use Docker Compose for local testing."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Integration test",src:i(1251).Z,width:"900",height:"599"})),(0,n.kt)("p",null,"So far, we have focused on tasks that occur pre-deployment. Now we will dive into tasks directly related to deploying services."),(0,n.kt)("h3",{id:"improvements-to-deployment-related-tasks"},"Improvements to Deployment-Related Tasks"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Architecture improved simplified deployment",src:i(9257).Z,width:"900",height:"512"})),(0,n.kt)("h4",{id:"manual-approval-of-staging-environments"},"Manual Approval of Staging Environments"),(0,n.kt)("p",null,"Most of Seamless\u2019s pipeline executes in a fully automated fashion. However, most CI/CD workflows do not embrace full continuous deployment, so Seamless provides an optional staging environment from which the user could manually approve deployment to production."),(0,n.kt)("p",null,"There were two patterns we could use to link stages to one another:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Proceed immediately to the next stage after one stage completes"),(0,n.kt)("li",{parentName:"ol"},"Pause after a stage completes")),(0,n.kt)("p",null,"AWS Step Functions offers two analogous job invocation styles: \u201cSynchronous\u201d and \u201cWait for a Callback Token\u201d. The Synchronous model was suitable for most stages because each stage should automatically start after the previous one finishes. However, if the user disables continuous deployment, the state machine should pause so the developer can perform quality checks on the staging environment. This second scenario was a good use case for Step Function\u2019s Wait for a Callback Token pattern."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Manual approval",src:i(4301).Z,width:"900",height:"265"})),(0,n.kt)("p",null,"Even if a staging environment is used, there is still a possibility of faulty code reaching production. For this reason, we decided to implement rollbacks."),(0,n.kt)("h4",{id:"rollbacks"},"Rollbacks"),(0,n.kt)("p",null,"New and small companies often prioritize speedy code releases, which can carry the risk of introducing errors or failures in the production environment. Rollbacks allow teams to restore a previous stable version of a service."),(0,n.kt)("p",null,"To enable rollbacks, we tag all Docker images with the git commit hash. Our UI displays all possible rollback images, giving users a choice of rollback targets. Instead of redeploying the entire system for a given rollback, each service can be rolled back independently, minimizing the impact on the overall deployment."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Rollbacks",src:i(2129).Z,width:"900",height:"462"})),(0,n.kt)("h4",{id:"automatic-deployment-of-fargate-clusters"},"Automatic Deployment of Fargate Clusters"),(0,n.kt)("p",null,"Since Seamless is targeted toward smaller teams that might lack experience deploying microservices, we built a feature that automatically deploys the user\u2019s Docker images to a Fargate Cluster and implements service discovery using AWS Service Connect. This approach helps users get their services up and running in production quickly, as they only need to provide basic information about their service and its image. The feature can be used to set up both staging and production environments."),(0,n.kt)("p",null,"At this point, our core architecture looked like this:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Architecture improved detailed",src:i(6874).Z,width:"900",height:"522"})),(0,n.kt)("p",null,"With our core functionality in place, we made Seamless a complete application by considering performance and scalability, security, notifications, and logging."),(0,n.kt)("h2",{id:"13-beyond-the-core-pipeline"},"13. Beyond the Core Pipeline"),(0,n.kt)("p",null,"There were a few additional infrastructural considerations and features remaining for us to review. Infrastructurally, we wanted to make Seamless more performant, scalable, and secure. We also wanted to add features that would make it easier for the user to monitor their pipeline, including notifications and log streaming."),(0,n.kt)("h3",{id:"designing-for-performance-and-scale"},"Designing for Performance and Scale"),(0,n.kt)("p",null,"Even though Seamless is designed for smaller companies, we designed our infrastructure to support the growth of such companies, whether it be adding more microservices or hiring more developers and making more commits. For instance, we evaluated the possibility of many changes being made to many microservices at once. Consider a scenario where ten microservices each initiate five new pull requests simultaneously; in such a case, Seamless's infrastructure would have to contend with managing fifty concurrent pipeline executions. To tackle this challenge, we developed Seamless to manage high volumes of pipeline executions."),(0,n.kt)("h4",{id:"parallel-execution-of-state-machines"},"Parallel Execution of State Machines"),(0,n.kt)("p",null,"Firstly, Seamless enables parallel execution of state machines by utilizing separate instances of AWS Step Functions. This allows for concurrent execution, enabling different microservices to use the shared pipeline simultaneously."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Parallel execution",src:i(8469).Z,width:"900",height:"337"})),(0,n.kt)("h4",{id:"serverless-backend"},"Serverless Backend"),(0,n.kt)("p",null,"Seamless\u2019s backend processes all status updates and logs generated by the pipeline. If there are many concurrent pipeline runs, the backend server could receive a high load of logs and status updates. As a result, we host our containerized backend on AWS\u2019s serverless container engine, ECS Fargate to spin up as many containers as needed in response to demand, without sacrificing performance. We set up a load balancer to evenly distribute traffic among these containers."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Serverless backend",src:i(4513).Z,width:"900",height:"350"})),(0,n.kt)("h3",{id:"basic-security"},"Basic Security"),(0,n.kt)("h4",{id:"oauth"},"OAuth"),(0,n.kt)("p",null,"Seamless needs secure access to the user\u2019s Github account to perform authorized actions, such as configuring webhooks and cloning their private repositories. To avoid exposing user credentials to Seamless, Seamless retrieves an access token using Github\u2019s OAuth implementation. The flow looks like this:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"When a user logs in to Seamless, they authenticate with Github, which sends back a temporary code."),(0,n.kt)("li",{parentName:"ol"},"The user (client) passes that code to Seamless\u2019s backend, which proxies the code to GitHub."),(0,n.kt)("li",{parentName:"ol"},"Github responds with an access token, which Seamless\u2019s backend sends to the client.")),(0,n.kt)("p",null,"The access token generated during the OAuth flow can then be used by Seamless\u2019s backend to:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Configure webhooks on the user\u2019s behalf."),(0,n.kt)("li",{parentName:"ol"},"Clone the user\u2019s repositories during state machine execution.")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Oauth flow",src:i(1537).Z,width:"900",height:"430"})),(0,n.kt)("h4",{id:"private-subnets"},"Private Subnets"),(0,n.kt)("p",null,"We also wanted to prevent direct network access to Seamless\u2019s infrastructure, aside from its public-facing API. As a result, we provisioned most of Seamless\u2019s infrastructure in private subnets so they can\u2019t accept incoming network traffic. In case a developer needs to interact with resources in private subnets, such as their relational database or Redis cache, we deploy a bastion host in a public subnet that a developer can SSH into."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Private subnet",src:i(5056).Z,width:"900",height:"486"})),(0,n.kt)("p",null,"Next, let\u2019s look into a few ways Seamless assists in monitoring pipeline executions."),(0,n.kt)("h3",{id:"logging"},"Logging"),(0,n.kt)("p",null,"If a developer or maintainer were deploying their application manually, they would be able to see logs output from their commands in realtime. For an automated CI/CD pipeline, displaying logs to the user is key to proactively monitoring problems, resolving build and deployment failures, and analyzing test reports."),(0,n.kt)("p",null,"To integrate logging into Seamless, we first needed a system to capture logs from all task containers. We sought a storage mechanism capable of quickly processing large volumes of logs, and so decided to use a Redis cache (specifically, AWS ElastiCache) due to its high-speed, in-memory data storage capabilities."),(0,n.kt)("p",null,"We needed to display logs in chronologically sorted order. As a result, we decided to use sorted sets to insert logs in sorted order, eliminating the need for sorting when reading logs. Incoming log streams are sent over WebSockets to the dashboard, where they are finally displayed."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Logging service",src:i(7012).Z,width:"900",height:"386"})),(0,n.kt)("h3",{id:"notifications"},"Notifications"),(0,n.kt)("p",null,"Engineering teams need to stay up-to-date with pipeline execution and quickly address any issues that arise. While users could already monitor their pipeline through the dashboard, we also added notification functionality to Seamless. Seamless offers integration with AWS Simple Notification Service (SNS), allowing for notifications to be sent via email, Slack, and PagerDuty."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Notifications",src:i(4070).Z,width:"900",height:"435"})),(0,n.kt)("h2",{id:"14-conclusion--future-work"},"14. Conclusion & Future Work"),(0,n.kt)("p",null,"Now that we\u2019ve discussed Seamless\u2019s architecture in depth, let\u2019s put it all together:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"When the source code is updated, GitHub sends a webhook to an API Gateway."),(0,n.kt)("li",{parentName:"ol"},"An Express.js backend running in an ECS Fargate cluster receives the webhook through an HTTP API Gateway."),(0,n.kt)("li",{parentName:"ol"},"The backend retrieves pipeline information from a PostgreSQL database and sends it to the state machine to initiate the pipeline."),(0,n.kt)("li",{parentName:"ol"},"The state machine executes each pipeline task in a container in ECS, which can share data via a mounted volume on Elastic File System (EFS) and access the Elastic Container Registry for pushing or pulling required images."),(0,n.kt)("li",{parentName:"ol"},"The updated source code is deployed to staging and production Fargate clusters.")),(0,n.kt)("p",null,"During the pipeline run, the state machine sends status updates to the backend for storage in the database, and to users via SNS. The task containers send logs to the backend to be inserted into a Redis log cache. The backend sends both status updates and logs to the frontend dashboard via a WebSockets connection maintained by the API Gateway."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Architecture final",src:i(909).Z,width:"900",height:"677"})),(0,n.kt)("p",null,"We narrowed down the scope of Seamless for Node-based containerized microservices running on ECS Fargate with similar build, test, and deployment requirements. However, going forward, there are additional features we would like to include and improvements we would like to make to our current implementation."),(0,n.kt)("h3",{id:"future-work"},"Future Work"),(0,n.kt)("p",null,"Seamless could be improved to support more use cases and offer more functionality. Some features we would like to explore are:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Additional microservice-specific testing options."),(0,n.kt)("li",{parentName:"ul"},"Expanding deployment options beyond ECS Fargate."),(0,n.kt)("li",{parentName:"ul"},"Supporting microservices not built using Node.js."),(0,n.kt)("li",{parentName:"ul"},"Caching dependencies between pipeline executions.")),(0,n.kt)("p",null,"Thank you for taking the time to read our case study!"),(0,n.kt)("h2",{id:"references"},"References"),(0,n.kt)("div",{className:"footnotes"},(0,n.kt)("hr",{parentName:"div"}),(0,n.kt)("ol",{parentName:"div"},(0,n.kt)("li",{parentName:"ol",id:"fn-1"},(0,n.kt)("a",{parentName:"li",href:"https://www.cmswire.com/information-management/version-control-systems-the-link-between-development-and-deployment/"},"https://www.cmswire.com/information-management/version-control-systems-the-link-between-development-and-deployment/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-2"},(0,n.kt)("a",{parentName:"li",href:"https://medium.com/driven-by-code/the-journey-to-ci-cd-b1872927c36b"},"https://medium.com/driven-by-code/the-journey-to-ci-cd-b1872927c36b"),(0,n.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-3"},(0,n.kt)("a",{parentName:"li",href:"https://hosteddocs.ittoolbox.com/RAW14335USEN-1.pdf"},"https://hosteddocs.ittoolbox.com/RAW14335USEN-1.pdf"),(0,n.kt)("a",{parentName:"li",href:"#fnref-3",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-4"},(0,n.kt)("a",{parentName:"li",href:"https://hosteddocs.ittoolbox.com/RAW14335USEN-1.pdf"},"https://hosteddocs.ittoolbox.com/RAW14335USEN-1.pdf"),(0,n.kt)("a",{parentName:"li",href:"#fnref-4",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-5"},(0,n.kt)("a",{parentName:"li",href:"https://medium.com/driven-by-code/the-journey-to-ci-cd-b1872927c36b"},"https://medium.com/driven-by-code/the-journey-to-ci-cd-b1872927c36b"),(0,n.kt)("a",{parentName:"li",href:"#fnref-5",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-6"},(0,n.kt)("a",{parentName:"li",href:"https://blog.technologent.com/avoid-these-5-ci/cd-pipeline-challenges"},"https://blog.technologent.com/avoid-these-5-ci/cd-pipeline-challenges"),(0,n.kt)("a",{parentName:"li",href:"#fnref-6",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-7"},(0,n.kt)("a",{parentName:"li",href:"https://semaphoreci.com/blog/cicd-pipeline"},"https://semaphoreci.com/blog/cicd-pipeline"),(0,n.kt)("a",{parentName:"li",href:"#fnref-7",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-8"},(0,n.kt)("a",{parentName:"li",href:"https://services.google.com/fh/files/misc/2022_state_of_devops_report.pdf"},"https://services.google.com/fh/files/misc/2022_state_of_devops_report.pdf"),(0,n.kt)("a",{parentName:"li",href:"#fnref-8",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-9"},(0,n.kt)("a",{parentName:"li",href:"https://semaphoreci.com/blog/cicd-pipeline"},"https://semaphoreci.com/blog/cicd-pipeline"),(0,n.kt)("a",{parentName:"li",href:"#fnref-9",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-10"},(0,n.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/azure/architecture/example-scenario/apps/devops-dotnet-baseline"},"https://learn.microsoft.com/en-us/azure/architecture/example-scenario/apps/devops-dotnet-baseline"),(0,n.kt)("a",{parentName:"li",href:"#fnref-10",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-11"},(0,n.kt)("a",{parentName:"li",href:"https://www.split.io/wp-content/uploads/2022/07/OReilly_Continuous_Delivery.pdf&sa=D&source=docs&ust=1680661643888770&usg=AOvVaw32qMoYJHHq2EAyhO-rJgav"},"https://www.split.io/wp-content/uploads/2022/07/OReilly_Continuous_Delivery.pdf&sa=D&source=docs&ust=1680661643888770&usg=AOvVaw32qMoYJHHq2EAyhO-rJgav"),(0,n.kt)("a",{parentName:"li",href:"#fnref-11",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-12"},(0,n.kt)("a",{parentName:"li",href:"https://www.atlassian.com/microservices/microservices-architecture/microservices-vs-monolith"},"https://www.atlassian.com/microservices/microservices-architecture/microservices-vs-monolith"),(0,n.kt)("a",{parentName:"li",href:"#fnref-12",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-13"},(0,n.kt)("a",{parentName:"li",href:"https://www.ibm.com/topics/microservices"},"https://www.ibm.com/topics/microservices"),(0,n.kt)("a",{parentName:"li",href:"#fnref-13",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-14"},(0,n.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=TAP8vVbsBXQ&t=2490s"},"https://www.youtube.com/watch?v=TAP8vVbsBXQ&t=2490s"),(0,n.kt)("a",{parentName:"li",href:"#fnref-14",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-15"},(0,n.kt)("a",{parentName:"li",href:"https://techbeacon.com/enterprise-it/microservices-containers-operations-guess-whos-responsible-now"},"https://techbeacon.com/enterprise-it/microservices-containers-operations-guess-whos-responsible-now"),(0,n.kt)("a",{parentName:"li",href:"#fnref-15",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-16"},(0,n.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=TAP8vVbsBXQ&t=2490s"},"https://www.youtube.com/watch?v=TAP8vVbsBXQ&t=2490s"),(0,n.kt)("a",{parentName:"li",href:"#fnref-16",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-17"},(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Don't_repeat_yourself"},"https://en.wikipedia.org/wiki/Don't_repeat_yourself"),(0,n.kt)("a",{parentName:"li",href:"#fnref-17",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-18"},(0,n.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=TAP8vVbsBXQ&t=2490s"},"https://www.youtube.com/watch?v=TAP8vVbsBXQ&t=2490s"),(0,n.kt)("a",{parentName:"li",href:"#fnref-18",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-19"},(0,n.kt)("a",{parentName:"li",href:"https://medium.com/containers-101/ci-cd-pipelines-for-microservices-ea33fb48dae0"},"https://medium.com/containers-101/ci-cd-pipelines-for-microservices-ea33fb48dae0"),(0,n.kt)("a",{parentName:"li",href:"#fnref-19",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-20"},(0,n.kt)("a",{parentName:"li",href:"https://martinfowler.com/articles/microservice-testing/"},"https://martinfowler.com/articles/microservice-testing/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-20",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-21"},(0,n.kt)("a",{parentName:"li",href:"https://martinfowler.com/articles/microservice-testing/#testing-integration-introduction"},"https://martinfowler.com/articles/microservice-testing/#testing-integration-introduction"),(0,n.kt)("a",{parentName:"li",href:"#fnref-21",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-22"},(0,n.kt)("a",{parentName:"li",href:"https://plugins.jenkins.io/"},"https://plugins.jenkins.io/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-22",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-23"},(0,n.kt)("a",{parentName:"li",href:"https://www.nimblework.com/blog/tekton-reusable-pipelines/&sa=D&source=docs&ust=1680661643881597&usg=AOvVaw1UMq2KRT4LCJBSBu_MibY-"},"https://www.nimblework.com/blog/tekton-reusable-pipelines/&sa=D&source=docs&ust=1680661643881597&usg=AOvVaw1UMq2KRT4LCJBSBu_MibY-"),(0,n.kt)("a",{parentName:"li",href:"#fnref-23",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-24"},(0,n.kt)("a",{parentName:"li",href:"https://www.codecapers.com.au/microservices-for-startups-1/"},"https://www.codecapers.com.au/microservices-for-startups-1/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-24",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-25"},(0,n.kt)("a",{parentName:"li",href:"https://www.perceptionsystem.com/blog/startups-with-micro-services-architecture/"},"https://www.perceptionsystem.com/blog/startups-with-micro-services-architecture/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-25",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-26"},(0,n.kt)("a",{parentName:"li",href:"https://www.codecapers.com.au/microservices-for-startups-1/"},"https://www.codecapers.com.au/microservices-for-startups-1/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-26",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-27"},(0,n.kt)("a",{parentName:"li",href:"https://codefresh.io/docs/docs/pipelines/introduction-to-codefresh-pipelines/"},"https://codefresh.io/docs/docs/pipelines/introduction-to-codefresh-pipelines/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-27",className:"footnote-backref"},"\u21a9")))))}u.isMDXComponent=!0},7924:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/architecture-core-simplified-282d33cd985715e40423ee3070393304.png"},5469:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/architecture-core-detailed-b265a671c133b4e9d2b14bd7aad7b619.png"},3142:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/architecture-core-simplified-taskexecutors-74b57ed3c776cc10f9debe349445d36d.png"},5716:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/architecture-core-simplified-taskmanager-e2fa543ba52d22665a6b1d2e4abf2b45.png"},612:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/build-task-0fd8183e9e6200301dd3df190864aef0.png"},1069:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/container-vs-vm-3fe5c4961603d87cc55787d91a93ba82.png"},8979:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/create-webhook-c2653db7ff1ee4f29c10a89efd0a246c.png"},2602:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/data-model-5faf3dca218ed44a480332d3ef0b29ac.png"},8973:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/state-machine-example-5ff53e99a78133adc36021acd57c00e6.png"},4517:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/step-function-definition-8a6b79ce7baf2a6eee1a32d891d2f424.png"},3675:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/task-containers-f0037d1debfe02d9e437cb4397e426ef.png"},4066:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/trigger-partial-vs-full-run-44435ad8093ef23a1c1e8a583cd6eac8.png"},4022:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/webhook-wide-7a71faf51a6f7acdf3247c92301e190a.png"},6874:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/architecture-improved-detailed-88a9a7a5239cff7496efef7c614acbda.png"},9257:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/architecture-improved-simplified-deployment-073912d99d1a128db5ad442572939f15.png"},3800:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/architecture-improved-simplified-predeployment-971021a96d3eeae9153b2f5c28c97518.png"},3415:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/efs-9638813e8061083a2d964cf3e40c7384.png"},1251:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/integration-test-9f85b583ccbaf4d38e51717aa694a7c9.png"},4301:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/manual-approval-f14ec9f277b51296276ff51e0dccc969.png"},9253:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/polling-vs-websockets-97838a8ffa54973f2b800f0659c63d4a.png"},2129:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/rollbacks-1fb09aa23daf9ca4da32ea03e3c71f2a.png"},299:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/test-vs-prod-environment-18866b34f4b732318bcb37217735d218.png"},7012:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/logging-service-69df951a3b305fc03d444000ff5dc267.png"},4070:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/notifications-b8f8f2e97b6f840f88fe243871538dd1.png"},1537:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/oauth-flow-c92f9c3272238b6832411243d8fcffbf.png"},8469:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/parallel-execution-22a755600801c2a9cd6861263c5c6d10.png"},5056:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/private-subnet-7d7d22530969881279275e7a5778cba7.png"},4513:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/serverless-backend-6655bf46f7fd1d90c1863018900eb29a.png"},909:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/architecture-final-84fb0d0d780977955dcaa9f94fdb1acb.png"},948:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/fast-release-cycle-4ede50d42602301c9b5ece6116e23882.png"},1814:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/manual-deployment-delay-a71675144ea3bbac0e57bd25bca6a67f.png"},7260:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/manual-vs-automated-deployment-93867505e26cb552a0d7c4761c3692d5.png"},9683:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/waterfall-delays-ec9255b8857f3ad5f7779211dff22d05.png"},3472:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/with-build-server-c92513ea1b58918ad7a044bb6a6a9733.png"},1360:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/without-build-server-69c0dc50a674e0ff1f52143821499a51.png"},2670:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/ci-cd-cd-df4221eca651e42bfdd9ab01a4e4d925.png"},3249:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/pipeline-stages-ceaa015ddbcb5e23af354d3bdabbf122.png"},7509:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/auto-merge-178e075e3a4193b6539abf060f236f2c.png"},3498:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/branching-strategies-156b6c269cc8d042379e797cd97bc11d.png"},7885:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/safety-velocity-spectrum-df89331c76350a9a4e173e593d580b21.png"},8358:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/monolith-microservices-3d02baa5cbf355d088098265349f3747.png"},4434:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/releasing-microservices-390e7dc236e831c6ea92b390ba94cde1.png"},7461:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/integration-vs-staging-testing-6f5c24650bcd59e7dd4293215ae7ebec.png"},2264:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/many-pipelines-0fccbe18b05fc2d9f26cd118f04af3ed.png"},2661:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/shared-pipeline-2fbcee96cae3fb6a6a9dd3fec776c526.png"},8042:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/shared-segments-473c8545895db0b7c8659298e2c70d0c.png"},9411:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/unit-mock-testing-900d19caafda67edb78c877df0648053.png"},8370:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/building-a-pipeline-435c403dffac99d5f4edb60fe04f4b48.png"},2114:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/comparison-chart-f453852abc3320f12278bdb2e73918be.png"},8538:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/cli-commands-fe1ad049e99f263e65ca66c07d426660.png"},1421:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/pipeline-triggers-0429bb2437175f5069d0103239a8bbfc.png"},4094:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/pipeline-f682eb118a657249dff6b2f29ddaec8e.gif"},2237:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/service-e4443f96685afdfdfded5ac79db59652.gif"}}]);